@page "/employees"
@inject HttpClient Http
@using Newtonsoft.Json
@using ClassLibrary2.Models
@using System.Data;

<h1>Employees</h1>

@if (res == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*
        <table class="table">
            <thead>
                <tr>
                    <th>Employee</th>
                    <th>Dept</th>
                    <th>Emp ID</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    *@

    <div class="sidebar">
        <NavMenu MnuCtrl="Employees" />
    </div>

    <div style="width:25%; float:left">
        <nav>
            <NavLink href="https://www.nydn.com">test</NavLink>
        </nav>
    </div>

    <div style="width:75%; float:right">
        <table class="table">
            <thead>
                <tr>
                    <th>Employee</th>
                    <th>Dept</th>
                    <th>Emp ID</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var emp in emps)
                {
                    <tr>
                        <td><a href=@($"/employee/{@emp.ID}")>@emp.FullName</a></td>
                        <td hidden="hidden">@emp.ID</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<button @onclick="@EmpGet">Get Emp</button>
<button @onclick="@EmpUpdt">Update Emp</button>
@emp.FirstName
<input placeholder="emp" @bind="@emp.FirstName" />
<button @onclick="() => emps?.Sort((x, y) => x.FirstName?.CompareTo(y.FirstName) ?? -1)">Sort Emps</button>
<button @onclick="() => emps?.OrderBy(i => i.FirstName)"> sort 2</button>
<button @onclick="@SortEmps"> sort 3</button>
<button @onclick="@FindEmps"> Find </button>

@code {
    List<Emp> emps, origEmps;
    Emp emp = new Emp();
    DataTable dt = new DataTable();

    WeatherForecast[] forecasts;
    string res;

    protected override async Task OnInitializedAsync()
    {
        //        res = "test";
        System.Diagnostics.Debug.WriteLine("before: debug test");
        Console.WriteLine("before ***********");
        //CORS err: res = await Http.GetStringAsync("https://www.nytimes.com/");

        try
        {
            res = await Http.GetStringAsync("https://localhost:44315/api/emps");
            emps = JsonConvert.DeserializeObject<List<Emp>>(res);
            origEmps = emps;
            //            dt = JsonConvert.DeserializeObject<DataTable>(res); //this is error, doesnt work, but ok, dont need
            Console.WriteLine(dt.Rows.Count);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        System.Diagnostics.Debug.WriteLine("after: debug test");
        Console.WriteLine(string.Join("\n", emps));
        //        Console.WriteLine(res);
        //StateHasChanged();
        //forecasts = await Http.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public int TemperatureF { get; set; }

        public string Summary { get; set; }
    }

    private async Task EmpGet()
    {
        res = await Http.GetStringAsync("https://localhost:44315/api/emps/2");
        var emps = JsonConvert.DeserializeObject<List<Emp>>(res);
        emp = emps[0];
        Console.WriteLine(emp.FirstName);
        StateHasChanged();
    }

    private async Task EmpUpdt()
    {
        //        emp.FirstName = "Joe";
        emp.LastName = "";
        var res = JsonConvert.SerializeObject(emp);
        await Http.PutJsonAsync("https://localhost:44315/api/emps/2", res);
    }

    private void SortEmps()
    {
        emps = emps.OrderBy(i => i.FullName, StringComparer.OrdinalIgnoreCase).ToList();
    }

    private void FindEmps()
    {
        emps = origEmps.FindAll(e => e.FullName.StartsWith(emp.FirstName ?? ""));
        Console.WriteLine("{0} {1}", emps.Count, origEmps.Count);
    }
}
